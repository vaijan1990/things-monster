{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","thing","id","name","email","CardList","things","map","card_component_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","searchField","target","value","title","state","bind","assertThisInitialized","_this2","fetch","then","response","json","users","_this$state","filterThings","filter","toLowerCase","includes","search_box_component_SearchBox","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4TAEaA,qBAAO,SAAAC,GAAK,OACvBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,QAAQC,IAAG,0BAAAC,OAA4BP,EAAMQ,MAAMC,GAAxC,eAClBR,EAAAC,EAAAC,cAAA,cAAMH,EAAMQ,MAAME,KAAlB,KACAT,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,aAAKH,EAAMQ,MAAMG,MAAjB,SCHSC,EAAW,SAAAZ,GAAK,OAC3BC,EAAAC,EAAAC,cAAA,OAAMC,UAAU,aACfJ,EAAMa,OAAOC,IAAI,SAAAN,GAAK,OACrBP,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKR,EAAMC,GAAID,MAAOA,QCJnBS,SAAY,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,YAAYC,EAAfF,EAAeE,aAAf,OACrBnB,EAAAC,EAAAC,cAAA,SAAOC,UAAW,SAClBiB,KAAK,SACLF,YAAaA,EACbG,SAAWF,MC0CAG,cA5Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAmBJP,aAAe,SAAAW,GACbP,EAAKQ,SAAS,CACdC,YAAaF,EAAMG,OAAOC,MAAOC,MAAOL,EAAMG,OAAOC,SAnBnDX,EAAKa,MAAQ,CACXxB,OAAQ,GACRoB,YAAa,GACbG,MAAQ,IAEVZ,EAAKJ,aAAeI,EAAKJ,aAAakB,KAAlBb,OAAAc,EAAA,EAAAd,CAAAD,IARRA,mFAUI,IAAAgB,EAAAb,KAGlBc,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAG1BF,KAAK,SAAAG,GAAK,OACTL,EAAKR,SAAS,CAACnB,OAAQgC,uCAQhB,IAAAC,EACiCnB,KAAKU,MAArCxB,EADDiC,EACCjC,OAAQoB,EADTa,EACSb,YAAaG,EADtBU,EACsBV,MACvBW,EAAelC,EAAOmC,OAAO,SAAAxC,GAAK,OACxCA,EAAME,KAAKuC,cAAcC,SAASjB,EAAYgB,iBAC9C,OACEhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAKiC,EAAL,KAEAnC,EAAAC,EAAAC,cAACgD,EAAD,CAAW/B,aAAcO,KAAKP,eAE9BnB,EAAAC,EAAAC,cAACiD,EAAD,CAAUvC,OAAQkC,YArCRM,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.0022f0e4.chunk.js","sourcesContent":["import React from 'react';\nimport './card-styles.css';\nexport const Card = props => (\n  <div className=\"card-container\">\n  <img alt=\"thing\" src={`https://robohash.org/'+${props.thing.id}?set=set2`} />\n    <h1> {props.thing.name} </h1>\n    <h2>\n    <p> {props.thing.email} </p>\n    </h2>\n  </div>\n);\n","import React from 'react';\nimport './card-list.styles.css';\nimport {Card} from '../../components/card/card.component';\n\nexport const CardList = props => (\n  <div  className=\"card-list\">\n  {props.things.map(thing => (\n    <Card key={thing.id} thing={thing}/>\n  ))}\n  </div>\n);\n","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder,handleChange  }) => (\n    <input className =\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange= {handleChange}\n    />\n)\n","import React , {Component} from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      things: [],\n      searchField: '',\n      title : ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\ncomponentDidMount() {\n  // calls when react renders first time\n  //   <CardList things={things} />  can be used to filter\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json(\n\n  ))\n  .then(users =>\n    this.setState({things: users}));\n}\nhandleChange = event => {\n  this.setState({\n  searchField: event.target.value, title: event.target.value})\n}\n\n\n  render() {\n    const { things, searchField, title  } = this.state;\n    const filterThings = things.filter(thing =>\n    thing.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <h1>{title} </h1>\n\n        <SearchBox handleChange={this.handleChange}/>\n\n        <CardList things={filterThings} />\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}